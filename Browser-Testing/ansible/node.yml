---
- hosts: all
  vars:
    drivers:
    - browser: chrome
      driver: chrome
      friendly: Chrome
      path: "C:\\Selenium\\drivers\\chromedriver\\chromedriver.exe"
    - browser: MicrosoftEdge
      driver: edge
      friendly: Edge
      path: "C:\\Selenium\\drivers\\edgedriver\\msedgedriver.exe"
    - browser: firefox
      driver: gecko
      friendly: Firefox
      path: "C:\\Selenium\\drivers\\geckodriver\\geckodriver.exe"
  tasks:
  # includes the ZeroTier network and hub IP
  - include_vars: secrets.yml

  - block:
    # installs ZeroTier
    - name: Install ZeroTier One
      win_chocolatey:
        name: zerotier-one
        state: present

    # joins ZeroTier network
    - name: Join ZeroTier network
      win_command: ".\\zerotier-cli.bat join {{ network }}"
      args:
        chdir: "C:\\Program Files (x86)\\ZeroTier\\One\\"
        creates: "C:\\ProgramData\\ZeroTier\\One\\networks.d\\{{ network }}.conf"
    when: network is defined

  # creates a working directory
  - name: Create a directory for Selenium
    win_file:
      path: "C:\\Selenium{{ item }}"
      state: directory
    loop:
    - "\\"
    - "\\drivers\\"
    - "\\profiles\\"

  # creates profile directories
  - name: Create empty profiles for each browser
    win_file:
      path: "C:\\Selenium\\profiles\\{{ item.friendly }}"
      state: directory
    loop: "{{ drivers }}"

  # downloads Chrome and Chrome webdriver
  - name: Get the latest Chrome Webdriver version
    local_action:
      module: uri
      url: https://chromedriver.storage.googleapis.com/LATEST_RELEASE
      return_content: true
    run_once: true
    register: chrome_version
  - name: Download Chrome Webdriver
    win_get_url:
      url: "https://chromedriver.storage.googleapis.com/{{ chrome_version.content }}/chromedriver_win32.zip"
      dest: &chromezip "C:\\Selenium\\drivers\\chromedriver.zip"
  - name: Extract Chrome Webdriver
    win_unzip:
      src: *chromezip
      dest: "C:\\Selenium\\drivers\\chromedriver\\"

  # installs latest version of Chrome (will be compatible with the most recent driver, even if it's a little old)
  - name: Install Chrome
    win_chocolatey:
      name: googlechrome
      ignore_checksums: true # chocolatey lags behind the installer versions, so the hashes may not match
      state: latest

  # downloads Edge and Edge webdriver
  - name: Get the latest Edge Webdriver version
    local_action:
      module: shell
      cmd: curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE | iconv -f UTF-16LE -t ASCII//TRANSLIT # have to convert because API returns UTF-16LE for no reason
    run_once: true
    register: edge_version
  - name: Download Edge Webdriver
    win_get_url:
      url: "https://msedgedriver.azureedge.net/{{ edge_version.stdout }}/edgedriver_win64.zip"
      dest: &edgezip "C:\\Selenium\\drivers\\edgedriver.zip"
  - name: Extract Edge Webdriver
    win_unzip:
      src: *edgezip
      dest: "C:\\Selenium\\drivers\\edgedriver\\"

  # installs the latest version of Edge (there are compatible driver versions for each release)
  - name: Install Edge
    win_chocolatey:
      name: microsoft-edge
      state: latest

  # downloads Firefox and Gecko webdriver
  - name: Get the latest Gecko Webdriver version
    local_action:
      module: uri
      url: https://api.github.com/repos/mozilla/geckodriver/releases/latest
      return_content: true
    run_once: true
    register: gecko_version
  - name: Download Gecko Webdriver
    win_get_url:
      url: "https://github.com/mozilla/geckodriver/releases/download/{{ gecko_version.json.tag_name }}/geckodriver-{{ gecko_version.json.tag_name }}-win64.zip"
      dest: &geckozip "C:\\Selenium\\drivers\\geckodriver.zip"
  - name: Extract Edge Webdriver
    win_unzip:
      src: *geckozip
      dest: "C:\\Selenium\\drivers\\geckodriver\\"

  # installs the latest version of Firefox (compatible with most versions of driver)
  - name: Install Firefox
    win_chocolatey:
      name: firefox
      state: present

  # downloads Java
  - name: Install OpenJDK
    win_chocolatey:
      name: openjdk
      version: 18.0.0
      state: present

  # downloads Selenium
  - name: Get the latest Selenium version
    local_action:
      module: uri
      url: https://api.github.com/repos/SeleniumHQ/selenium/releases/latest
      return_content: true
    run_once: true
    register: selenium_version
  - name: Download Selenium Server
    win_get_url:
      url: "https://github.com/SeleniumHQ/selenium/releases/download/{{ selenium_version.json.tag_name }}/selenium-server-{{ selenium_version.json.tag_name[9:] }}.jar"
      dest: "C:\\Selenium\\selenium-server.jar"

  # installs nssm
  - name: Install NSSM
    win_chocolatey:
      name: nssm
      state: present

  # generates TOML-based configuration
  - name: Generate the Selenium Grid configuration
    win_template:
      src: node.toml.j2
      dest: "C:\\Selenium\\selenium.toml"
    register: config_update

  # creates a new service
  - name: Create Windows service
    win_nssm:
      name: Selenium Grid
      state: present
      application: "C:\\Program Files\\OpenJDK\\jdk-18\\bin\\java.exe"
      arguments: "%java_opts% -jar C:\\Selenium\\selenium-server.jar %selenium_grid_role% %selenium_grid_args%"
      stdout_file: "C:\\Selenium\\selenium-server.out.log"
      stderr_file: "C:\\Selenium\\selenium-server.err.log"
      app_environment:
        JAVA_OPTS: "{% for driver in drivers %}-Dwebdriver.{{ driver.driver }}.driver={{ driver.path }} {% endfor %}"
        SELENIUM_GRID_ROLE: node
        SELENIUM_GRID_ARGS: "--config C:\\Selenium\\selenium.toml"
    register: service_registration

  # virtual service account
  - name: Switch service to service account
    win_command: nssm set "Selenium Grid" ObjectName "NT Service\Selenium Grid"

  # restarts Selenium Grid
  - name: Start/restart Selenium Grid
    win_nssm:
      name: Selenium Grid
      application: "C:\\Program Files\\OpenJDK\\jdk-18\\bin\\java.exe"
      state: restarted
    when: config_update.changed or service_registration.changed

  # firewall exception for Selenium node
  - name: Allow incoming Selenium connections
    win_firewall_rule:
      name: Selenium Grid
      localport: 5555
      action: allow
      direction: in
      protocol: tcp
      state: present
      enabled: true
